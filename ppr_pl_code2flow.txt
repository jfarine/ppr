start;
load Modules;
Inits;
Load and check rundata;
Load and check database;
open I/O files;
// main event loop
// read from <rfn>.tod
before_IDF:
if( read IDF)[next point]{
    get time;
    ndata++;
    # scan_for_xtremes;
    if($ndata == 1) {
		    setmax();
		    setmin();
    } else {
        if($qty > $qty_max) {
			      setmax();
        }
        if($qty < $qty_min) {
			      setmin();
        }
    }
    ||push(@dq_local_vals,$qty)
      push(@last_datetime_vals, $datetime)||;
    // $thres_gap 
    set PARAMs from rundata;
    // $n_recent_to_consider
    // $n_slope_up_above_thres
    // $spate_thres_up
    // $n_not_in_spate_req
    // $dq_local_min
    // $n_thres_up
    // $thres_up
    // $n_thres_dn
    // $thres_dn
    set PARAMs from DB;
    if(ndata > 1){
        calc Dqs, Dts, dq/dt;
        // gap in
        // data ?
        if(dt > gap ?){
            <msg STDOUT, ODGF>;
            update xtreme vars;
        } else {
            update extrema;
        }
        // overlap
        // condition ?
        if(dt < 0?){
            <msg STDOUT>;
            incr counters;
        }
        // **DB spate_thres_up**
        if(dqdt_qph > spate_thres_up) {
            above_thres = 1;
        } else {
            above_thres = 0;
        }
        ||push(@last_thres_vals, $above_thres)
          push(@last_qty_vals,$qty)
          push(datetime stacks)||;
        // **DB thres_up**
        if(dqdt_qph > thres_up) {
            up_met = 1;
        } else {
            up_met = 0;
        }
        ||push(@last_slopeup_vals,$up_met)||;
        // **DB thres_dn**
        if(dqdt_qph <= thres_dn) {
            dn_met = 1;
        } else {
            dn_met = 0;
        }
        ||push(@last_slopedn_vals,$dn_met)||;
        // current point
        // in_spate cond'n ?
        // ** DB n_recent_to_consider**
        if(ndata > n_recent_to_consider){
            sum=SUM(last_thres_vals)
            (0..n_recent_to_consider);
            dq_local=dq_local_vals
            ((n_recent_to_consider)-(0));
            // **DB n_slope_up_above_thres**
            // **DB n_recent_to_consider**
            // **DB dq_local_min**
            if(sum > n_slope_up_above_thres
               && last_thres_vals(0)
               && last_thres_vals(n_recent_to_consider-1)
               && dq_local > dq_local_min){
                in_spate = 1;
            } else {
                in_spate = 0;
            }
            ||push(@last_in_spate_vals,$in_spate)||;
            if(ndata > n_recent_to_consider
               +n_not_in_spate_req){
                sum_ris=SUM(last_in_spate_vals)
                (0..n_not_in_spate_req);
                // recent points
                // ID new spate ?
                if(in_spate && sum_ris=0){
                    new_spate = 1;
                    n_spate++;
                    peak_passed = 0;
                } else {
                    new_spate = 0;
                }
                if(new_spate){
                    set qty_base, epoch_base;
                    if(n_spate = 1){
                        tsls_d = Delta(epochs)/86400;
                    } else {
                        tsls_d = 0
                        tsls_d_max = 0;
                    }
                    if(n_spate > 1){
                        <Output NL to files>;
                    }
                    <Output Findings to 
                    STDOUT, ODSF, ODSLF>;
                    last_spate_epoch = epoch_base;
                }
                ||shift(@last_in_spate_vals)||;
            }
            ||shift(@dq_local_vals)
              shift(@last_thres_vals)
              shift(@last_qty_vals)
              shift(datetime stacks)||;
        }
        if(ndata > 8){
            using @tt,@ll, define SL1,2;
            calc DSL;
        }
        // **DB n_thres_up**
        if(ndata > n_thres_up+1){
            peak_cond_met = 1;
            // **DB n_thres_up**
            if(peak_cond_met *=  last_slopeup_vals
               FOR ALL (0..(n_thres_up-1)) ){
                peak_cond_met = 1;
            } else {
                peak_cond_met = 0;
            }
            ||shift(@last_slopeup_vals)||;
            <msg STDOUT>;
            // peak
            // detection
            // **DB n_thres_up**
            if(dqdt_qph <= thres_up
              && peak_cond_met == 1
              && nspate > 0){
                <STDOUT "passed">;
                is_max=1;
                qty_delta=qty_max-qty_base;
                if(qty > dq_max ?){
                    update dq_max;
                }
                get Delta_epoch/day;
                <STDOUT time, Deltas>;
                if(peak_passed){
                    <"\n" to STDOUT, O files;>
                }
                <print to ODSLF>;
                peak_passed = 1;
                setmin();
            } else {
                <STDOUT "failed">;
                is_max = 0;
            }
        }
        // **DB n_thres_dn**
        if(ndata > n_thres_dn+1){
            // **DB n_thres_dn**
            if(all last_slopedn_vals(0..(n_thres_dn-1)) = 1){
                through_cond_met = 1;
            } else {
                through_cond_met = 0;
            }
            ||shift(last_lopedn_vals)||;
            <msg STDOUT>;
            // through
            // detection
            // **DB n_thres_dn**
            if(dqdt_qph <= thres_dn
              && peak(through?)_cond_met == 1
              && nspate > 0){
                <STDOUT "passed">;
                is_min=1;
                qty_delta=qty_min-qtymax,
                and Delta_epoch/day;
                <STDOUT time, Deltas
                print to ODSLF>;
                through_passed = 1;
                setmax();
            } else {
                <STDOUT "failed">;
                is_min = 0;
            }
        }
    }
    <print to O files>;
    last_var's = current_var's;
    loop before_IDF [next data point];
} else [EOF] {
    close most O files;
    <conclusion print to O file>;
    close O file;
    end;
}
